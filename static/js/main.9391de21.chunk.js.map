{"version":3,"sources":["redux/host-network/host-network-state.js","redux/host-network/action-types.js","redux/host-network/host-network-reducer.js","redux/room/action-types.js","redux/room/room-reducer.js","redux/root-reducer.js","redux/store.js","game-management/host.js","redux/host-network/host-network-selectors.js","redux/host-network/host-network-actions.js","redux/room/room-selectors.js","redux/room/room-actions.js","pages/homepage.jsx","pages/server-awaiting-players.jsx","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","networkState","backendAddress","socket","io","autoConnect","reconnection","timeout","HostNetworkReducer","state","action","type","actionTypes","payload","roomCode","RoomReducer","rootReducer","combineReducers","hostNetwork","room","roomReducer","store","createStore","applyMiddleware","logger","getObjectState","selectors","reduce","accum","currentSelector","applyStateToObject","object","Object","keys","forEach","key","onStoreUpdate","getState","updatedState","addActionsToObject","actions","name","func","dispatch","connectToStore","initialState","subscribe","host","setNetworkState","newState","setRoomCode","connect","this","hostNetworkState","open","self","Promise","resolve","reject","connectionPromise","handleRoomcodeEvent","handlePlayerConnection","data","players","push","handleConnect","emit","handleConnectionFailed","alert","handleDisconnect","on","Modal","styled","div","containerStyle","position","Homepage","props","useState","isConnecting","setIsConnecting","setInterval","style","onClick","console","log","then","code","setTimeout","onHostGame","ServerAwaitingPlayers","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9391de21.chunk.js","sourcesContent":["export default {\r\n  disconnected: \"disconnected\",\r\n  connecting: \"connecting\",\r\n  awaitingRoomcode: \"awaitingRoomcode\",\r\n  awaitingPlayers: \"awaitingPlayers\"\r\n}","export default {\r\n  SET_NETWORK_STATE: \"set network state\"\r\n};","import networkState from './host-network-state'\r\nimport io from 'socket.io-client'\r\nimport actionTypes from './action-types'\r\n\r\nconst BACKEND_ADDRESS = 'https://jeopardy-garbage.herokuapp.com/';\r\n// const BACKEND_ADDRESS = 'http://localhost:4000/';\r\n\r\nconst INITIAL_STATE = {\r\n  networkState: networkState.disconnected,\r\n  backendAddress: BACKEND_ADDRESS,\r\n  socket: io(BACKEND_ADDRESS, {autoConnect: false, reconnection: false, timeout: 10000}),\r\n}\r\n\r\nconst HostNetworkReducer = (state = INITIAL_STATE, action) => {\r\n  switch(action.type) {\r\n  \r\n    case actionTypes.SET_NETWORK_STATE:\r\n      return {\r\n      ...state,\r\n      networkState: action.payload\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default HostNetworkReducer;","export default {\r\n  SET_ROOM_CODE: \"setRoomCode\"\r\n};","import actionTypes from './action-types'\r\n\r\nconst INITIAL_STATE = {\r\n  roomCode: '',\r\n}\r\n\r\nconst RoomReducer = (state = INITIAL_STATE, action) => {\r\n  switch(action.type) {\r\n  \r\n    case actionTypes.SET_ROOM_CODE:\r\n      return {\r\n      ...state,\r\n      roomCode: action.payload\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default RoomReducer;","import { combineReducers } from 'redux';\r\nimport HostNetworkReducer from './host-network/host-network-reducer'\r\nimport roomReducer from './room/room-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  hostNetwork: HostNetworkReducer,\r\n  room: roomReducer\r\n});\r\n\r\nexport default rootReducer;","import { applyMiddleware, createStore } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './root-reducer';\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(logger));\r\n\r\nconst getObjectState = (state, selectors) => selectors.reduce(\r\n    (accum, currentSelector) => ({...accum, ...currentSelector(state)}),\r\n  {})\r\n\r\nconst applyStateToObject = (state, object) => {\r\n  let keys = Object.keys(state);\r\n  \r\n  keys.forEach(key => {\r\n    object[key] = state[key];\r\n  });\r\n}\r\nconst onStoreUpdate = (object, selectors) => {\r\n  let state = store.getState();\r\n\r\n  const updatedState = getObjectState(state, selectors);\r\n  applyStateToObject(updatedState, object);\r\n}\r\n\r\nconst addActionsToObject = (object, actions) => {\r\n  let actionNames = Object.keys(actions);\r\n  actionNames.forEach(name => {\r\n    let func = actions[name];\r\n    object[name] = (payload) => store.dispatch(func(payload));\r\n  })\r\n}\r\n\r\nconst connectToStore = (object, selectors = [], actions = {}) => {\r\n\r\n  const state = store.getState();\r\n  const initialState = getObjectState(state, selectors);\r\n\r\n  applyStateToObject(initialState, object);\r\n  \r\n  addActionsToObject(object, actions)\r\n  store.subscribe( () => onStoreUpdate(object, selectors));\r\n  \r\n}\r\n\r\nexport { store, connectToStore };","import io from 'socket.io-client'\r\nimport { store, connectToStore } from 'redux/store'\r\nimport { hostNetworkSelector } from 'redux/host-network/host-network-selectors'\r\nimport { roomSelector } from 'redux/room/room-selectors'\r\nimport { setRoomCode } from 'redux/room/room-actions'\r\nimport hostNetworkState from 'redux/host-network/host-network-state'\r\nimport {setNetworkState} from 'redux/host-network/host-network-actions'\r\n\r\nvar host = {};\r\n\r\nconnectToStore(host, [hostNetworkSelector], {setNetworkState});\r\nconnectToStore(host, [roomSelector], {setRoomCode});\r\n\r\n//promise template for attempting to connect\r\n//returns a function that needs to be sent to new Promise(), that should be resolved/rejected when the owning socket connects or fails to connects\r\nfunction connectionPromise(owner) {\r\n  return (resolve, reject) => {\r\n    owner.connectionPromise = {\r\n      resolve,\r\n      reject\r\n    }\r\n  }\r\n}\r\n\r\n//connect function, returns a promise\r\n//if connection si successfull and a roomcode is received, then the resolve is called with the roomcode given to it\r\n//if connection or roomcode isn't received then it is marked as rejected\r\nhost.connect = function() {\r\n\r\n  //not trying to connect, so try to connect and return promise\r\n  if(this.networkState === hostNetworkState.disconnected) {\r\n    \r\n    this.socket.open();\r\n    this.setNetworkState(hostNetworkState.connecting);\r\n    \r\n    let self = this;\r\n    return new Promise(\r\n      (resolve, reject) => {\r\n        self.connectionPromise = {resolve, reject};\r\n      }\r\n    );\r\n  }\r\n  //already connected, return a promise that resolves immediately\r\n  if(this.networkState === hostNetworkState.awaitingPlayers)\r\n    return new Promise((resolve, reject) => resolve(this.roomCode));\r\n\r\n  //already connectioning, should have a promise, if not then cry\r\n  // if(this.networkState === hostNetworkState.connecting || this.networkState === hostNetworkState.awaitingRoomcode)\r\n    return this.connectionPromise;\r\n}\r\n\r\nhost.handleRoomcodeEvent = function(roomCode) {\r\n  this.setNetworkState(hostNetworkState.awaitingPlayers);\r\n  this.setRoomCode(roomCode);\r\n  this.connectionPromise.resolve(roomCode);\r\n}\r\n\r\nhost.handlePlayerConnection = function(data) {\r\n  this.players.push(data);\r\n}\r\n\r\nhost.handleConnect = function() {\r\n  this.setNetworkState(hostNetworkState.awaitingRoomcode);\r\n  this.socket.emit('host');\r\n}\r\n\r\nhost.handleConnectionFailed = function() {\r\n  alert(\"failed to connect to server.\");\r\n  this.connectionPromise.reject();\r\n  this.setNetworkState(hostNetworkState.disconnected);\r\n}\r\n\r\nhost.handleDisconnect = function() {\r\n  this.setNetworkState(hostNetworkState.disconnected);\r\n}\r\n\r\n//can't use point free because of the binding of the 'this'\r\nhost.socket.on('connect', () => host.handleConnect());\r\nhost.socket.on('roomcode', (roomCode) => host.handleRoomcodeEvent(roomCode));\r\nhost.socket.on('playerConnection', (data) => host.handlePlayerConnection(data));\r\nhost.socket.on('connect_error', () => host.handleConnectionFailed());\r\nhost.socket.on('connect_timeout', () => host.handleConnectionFailed());\r\nhost.socket.on('disconnect', () => host.handleDisconnect());\r\n\r\nexport default host;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst hostNetworkSelector = state => state.hostNetwork\r\n\r\nexport { hostNetworkSelector };","import actionTypes from './action-types'\r\n\r\nconst setNetworkState = (newState) => ({\r\n  type: actionTypes.SET_NETWORK_STATE,\r\n  payload: newState\r\n});\r\n\r\nexport { setNetworkState }","import { createSelector } from 'reselect';\r\n\r\nconst roomSelector = state => state.room\r\n\r\nexport { roomSelector };","import actionTypes from './action-types'\r\n\r\nconst setRoomCode = (roomCode) => ({\r\n  type: actionTypes.SET_ROOM_CODE,\r\n  payload: roomCode\r\n});\r\n\r\nexport { setRoomCode }","import React, {useState} from 'react';\r\nimport host from 'game-management/host'\r\nimport styled,  {css} from 'styled-components'\r\n\r\nconst Modal = styled.div`\r\n\tposition: absolute;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tbackground-color: rgba(0,0,0,0.7);\r\n\topacity: 0.8;\r\n\twidth: 100vw;\r\n\theight: 100vh;\r\n`;\r\n\r\nconst modalStyle = {\r\n\tposition:'fixed',\r\n\tleft: 0,\r\n\ttop: 0,\r\n\tbackgroundColor: \"rgba(0, 0, 0, 0.7\",\r\n\topacity: 0.8,\r\n\twidth: \"100vw\",\r\n\theight: \"100vh\",\r\n\tzIndex: 99\r\n}\r\n\r\nconst containerStyle = {\r\n\tposition:'relative'\r\n}\r\n\r\nconst onHostGame = (setIsConnecting) => {\r\n\tconsole.log(host);\r\n\tsetIsConnecting(true);\r\n\thost.connect().then(\r\n\t\t(code) => \r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconsole.log(\"connected successfully!  \" + code );\r\n\t\t\t\tsetIsConnecting(false);\r\n\t\t\t}, 1000),\r\n\t\t() => setTimeout(() => {\r\n\t\t\tsetIsConnecting(false);\r\n\t\t}, 500)\r\n\t);\r\n}\r\n\r\nconst Homepage = props => {\r\n\t\r\n\tconst [isConnecting, setIsConnecting] = useState(false);\r\n\tsetInterval(() => alert(\"lolz\"), 4000);\r\n\r\n\treturn (\r\n\t<div style={containerStyle}>\r\n\t\t<h1>\r\n\t\t\t\tALERTING\r\n\t\t</h1>\r\n\t\t<button onClick={() => onHostGame(setIsConnecting)}>\r\n\t\t\tHost Game\r\n\t\t</button>\r\n\t\t<button>\r\n\t\t\tJoin Game\r\n\t\t</button>\r\n\t\t{isConnecting && (\r\n\t\t\t<Modal>\r\n\t\t\t\t<h1>Connecting</h1>\r\n\t\t\t</Modal>\r\n\t\t)}\r\n\t</div>\r\n)\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\n\r\nconst ServerAwaitingPlayers = props => (\r\n\t<div>\r\n\t\t<h1>\r\n\t\t\tJeopardy\r\n\t\t</h1>\r\n\t\t<h1>\r\n\t\t\tRoom Code\r\n\t\t</h1>\r\n\t\t<button>\r\n\t\t\tStart Game\r\n\t\t</button>\r\n\t\t<button>\r\n\t\t\tBack\r\n\t\t</button>\r\n\t</div>\r\n)\r\n\r\nexport default ServerAwaitingPlayers;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom'\nimport Homepage from './pages/homepage'\nimport ServerAwaitingPlayers from './pages/server-awaiting-players'\nimport './App.css';\n\nconst App = props => (\n  <div>\n    <Switch>\n      <Route exact path='/' component={Homepage} />\n      <Route exact path='/waiting' component={ServerAwaitingPlayers} />\n    </Switch>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {MemoryRouter as Router} from 'react-router-dom';\nimport { store } from './redux/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router basename={process.env.PUBLIC_URL}>\n      <App />\n    </Router>\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}